---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Template CF para construir a infraestrura
  do ECS Cluster
Parameters:
  ECSClusterName:
    Type: String

  ECSClusterService:
    Type: String

  GraphQLALBName:
    Type: String

  GraphQLALBSecurityGroup:
    Type: String

  GraphQLECSSecurityGroup:
    Type: String

  CpuTask:
    Type: Number

  MemoryTask:
    Type: Number

  ContainerPort:
    Type: Number

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ECSClusterName
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Project
          Value: GraphQL

  GraphQLAppLoadBalancingSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue MinhaVPC
      GroupName: !Ref GraphQLALBSecurityGroup
      GroupDescription: "GraphQL Load Balancer Security Group"
      SecurityGroupIngress:
        - CidrIp: 10.0.0.1/16
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      Tags:
        - Key: Project
          Value: GraphQL
        - Key: Name
          Value: "sg-alb-graphql"

  GraphQLAppLoadBalancing:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref GraphQLALBName
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref GraphQLAppLoadBalancingSG
      Subnets:
        - !ImportValue SubnetPrivadaA
        - !ImportValue SubnetPrivadaB
      Tags:
        - Key: Project
          Value: GraphQL

  GraphQLALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref GraphQLAppLoadBalancing
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          Order: 50000
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTP
            Port: "8080"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"

  GraphQLTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MinhaVPC
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: "ip"
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 4
      HealthCheckPath: "/health"
      Matcher:
        HttpCode: "200-299,401,404"

  GraphQLALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref GraphQLALBListener
      Priority: 1000
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GraphQLTargetGroup
      Conditions:
        - Field: path-pattern
          Values: 
            - "/graphql/*"

  # GraphQLECSSG:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !ImportValue MinhaVPC
  #     GroupName: !Ref GraphQLECSSecurityGroup
  #     GroupDescription: "GraphQL ECS Security Group"
  #     SecurityGroupIngress:
  #       - CidrIp: 10.0.0.1/16
  #         FromPort: 80
  #         ToPort: 8080
  #         IpProtocol: tcp
  #     Tags:
  #       - Key: Project
  #         Value: GraphQL
  #       - Key: Name
  #         Value: "sg-ecs-graphql"

  # GraphQLClusterService:
  #   Type: AWS::ECS::Service
  #   Properties:
  #     ServiceName: !Ref ECSClusterService
  #     LaunchType: FARGATE
  #     PlatformVersion: "1.4.0"
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: 1
  #     HealthCheckGracePeriodSeconds: 60
  #     TaskDefinition: !Ref TaskDefinition
  #     DeploymentConfiguration:
  #       MaximumPercent: 200
  #       MinimumHealthyPercent: 100
  #     LoadBalancers:
  #       - ContainerName: !Ref AWS::StackName
  #         ContainerPort: !Ref ContainerPort
  #         TargetGroupArn: !Ref GraphQLTargetGroup
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         Subnets:
  #           - !ImportValue SubnetPrivadaA
  #           - !ImportValue SubnetPrivadaB
  #         SecurityGroups:
  #           - !Ref GraphQLECSSG

  # # Task Definition
  # TaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     NetworkMode: "awsvpc"
  #     RequiresCompatibilities:
  #       - FARGATE
  #     Cpu: !Ref CpuTask
  #     Memory: !Ref MemoryTask
  #     TaskRoleArn: !GetAtt TaskRole.Arn
  #     ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
  #     ContainerDefinitions:
  #       - Name: !Ref AWS::StackName
  #         Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/"
  #         PortMappings:
  #           - ContainerPort: !Ref ContainerPort

  # TaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Path: "/graphql/ecs/"
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - "ecs-tasks.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"

  # TaskExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Path: "/graphql/ecs/"
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - "ec2.amazonaws.com"
  #               - "ecs-tasks.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

Outputs:
  ECSClusterArn:
    Description: Exports the Arn value of the ECS Cluster
    Value: !GetAtt ECSCluster.Arn